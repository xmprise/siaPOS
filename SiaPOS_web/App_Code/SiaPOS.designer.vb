'------------------------------------------------------------------------------
' <auto-generated>
'     이 코드는 도구를 사용하여 생성되었습니다.
'     런타임 버전:4.0.30319.235
'
'     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
'     이러한 변경 내용이 손실됩니다.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SibalChk2011")>  _
Partial Public Class SiaPOSDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "확장성 메서드 정의"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertShopAccount(instance As ShopAccount)
    End Sub
  Partial Private Sub UpdateShopAccount(instance As ShopAccount)
    End Sub
  Partial Private Sub DeleteShopAccount(instance As ShopAccount)
    End Sub
  Partial Private Sub InsertShopInformation(instance As ShopInformation)
    End Sub
  Partial Private Sub UpdateShopInformation(instance As ShopInformation)
    End Sub
  Partial Private Sub DeleteShopInformation(instance As ShopInformation)
    End Sub
  Partial Private Sub InsertMenuInformation(instance As MenuInformation)
    End Sub
  Partial Private Sub UpdateMenuInformation(instance As MenuInformation)
    End Sub
  Partial Private Sub DeleteMenuInformation(instance As MenuInformation)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SibalChk2011ConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ShopAccount() As System.Data.Linq.Table(Of ShopAccount)
		Get
			Return Me.GetTable(Of ShopAccount)
		End Get
	End Property
	
	Public ReadOnly Property ShopInformation() As System.Data.Linq.Table(Of ShopInformation)
		Get
			Return Me.GetTable(Of ShopInformation)
		End Get
	End Property
	
	Public ReadOnly Property MenuInformation() As System.Data.Linq.Table(Of MenuInformation)
		Get
			Return Me.GetTable(Of MenuInformation)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteShopAccount")>  _
	Public Function DeleteShopAccount(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ShopID", DbType:="VarChar(50)")> ByVal shopID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), shopID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SelectShopAccount")>  _
	Public Function SelectShopAccount(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ShopID", DbType:="VarChar(50)")> ByVal shopID As String) As ISingleResult(Of SelectShopAccountResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), shopID)
		Return CType(result.ReturnValue,ISingleResult(Of SelectShopAccountResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Shop.ShopAccount")>  _
Partial Public Class ShopAccount
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ShopAccountID As Integer
	
	Private _ShopID As String
	
	Private _MenuName As String
	
	Private _Date As Date
	
	Private _TableNumber As Integer
	
	Private _MenuAccount As Integer
	
	Private _Profit As Integer
	
	Private _OrderState As System.Nullable(Of Integer)
	
	Private _ShopInformation As EntityRef(Of ShopInformation)
	
	Private _MenuInformation As EntityRef(Of MenuInformation)
	
    #Region "확장성 메서드 정의"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnShopAccountIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnShopAccountIDChanged()
    End Sub
    Partial Private Sub OnShopIDChanging(value As String)
    End Sub
    Partial Private Sub OnShopIDChanged()
    End Sub
    Partial Private Sub OnMenuNameChanging(value As String)
    End Sub
    Partial Private Sub OnMenuNameChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As Date)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnTableNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnTableNumberChanged()
    End Sub
    Partial Private Sub OnMenuAccountChanging(value As Integer)
    End Sub
    Partial Private Sub OnMenuAccountChanged()
    End Sub
    Partial Private Sub OnProfitChanging(value As Integer)
    End Sub
    Partial Private Sub OnProfitChanged()
    End Sub
    Partial Private Sub OnOrderStateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrderStateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ShopInformation = CType(Nothing, EntityRef(Of ShopInformation))
		Me._MenuInformation = CType(Nothing, EntityRef(Of MenuInformation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopAccountID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ShopAccountID() As Integer
		Get
			Return Me._ShopAccountID
		End Get
		Set
			If ((Me._ShopAccountID = value)  _
						= false) Then
				Me.OnShopAccountIDChanging(value)
				Me.SendPropertyChanging
				Me._ShopAccountID = value
				Me.SendPropertyChanged("ShopAccountID")
				Me.OnShopAccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ShopID() As String
		Get
			Return Me._ShopID
		End Get
		Set
			If (String.Equals(Me._ShopID, value) = false) Then
				If Me._ShopInformation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnShopIDChanging(value)
				Me.SendPropertyChanging
				Me._ShopID = value
				Me.SendPropertyChanged("ShopID")
				Me.OnShopIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MenuName() As String
		Get
			Return Me._MenuName
		End Get
		Set
			If (String.Equals(Me._MenuName, value) = false) Then
				If Me._MenuInformation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMenuNameChanging(value)
				Me.SendPropertyChanging
				Me._MenuName = value
				Me.SendPropertyChanged("MenuName")
				Me.OnMenuNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="DateTime NOT NULL")>  _
	Public Property [Date]() As Date
		Get
			Return Me._Date
		End Get
		Set
			If ((Me._Date = value)  _
						= false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TableNumber", DbType:="Int NOT NULL")>  _
	Public Property TableNumber() As Integer
		Get
			Return Me._TableNumber
		End Get
		Set
			If ((Me._TableNumber = value)  _
						= false) Then
				Me.OnTableNumberChanging(value)
				Me.SendPropertyChanging
				Me._TableNumber = value
				Me.SendPropertyChanged("TableNumber")
				Me.OnTableNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuAccount", DbType:="Int NOT NULL")>  _
	Public Property MenuAccount() As Integer
		Get
			Return Me._MenuAccount
		End Get
		Set
			If ((Me._MenuAccount = value)  _
						= false) Then
				Me.OnMenuAccountChanging(value)
				Me.SendPropertyChanging
				Me._MenuAccount = value
				Me.SendPropertyChanged("MenuAccount")
				Me.OnMenuAccountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Profit", DbType:="Int NOT NULL")>  _
	Public Property Profit() As Integer
		Get
			Return Me._Profit
		End Get
		Set
			If ((Me._Profit = value)  _
						= false) Then
				Me.OnProfitChanging(value)
				Me.SendPropertyChanging
				Me._Profit = value
				Me.SendPropertyChanged("Profit")
				Me.OnProfitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderState", DbType:="Int")>  _
	Public Property OrderState() As System.Nullable(Of Integer)
		Get
			Return Me._OrderState
		End Get
		Set
			If (Me._OrderState.Equals(value) = false) Then
				Me.OnOrderStateChanging(value)
				Me.SendPropertyChanging
				Me._OrderState = value
				Me.SendPropertyChanged("OrderState")
				Me.OnOrderStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ShopInformation_ShopAccount", Storage:="_ShopInformation", ThisKey:="ShopID", OtherKey:="ShopID", IsForeignKey:=true)>  _
	Public Property ShopInformation() As ShopInformation
		Get
			Return Me._ShopInformation.Entity
		End Get
		Set
			Dim previousValue As ShopInformation = Me._ShopInformation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ShopInformation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ShopInformation.Entity = Nothing
					previousValue.ShopAccount.Remove(Me)
				End If
				Me._ShopInformation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ShopAccount.Add(Me)
					Me._ShopID = value.ShopID
				Else
					Me._ShopID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ShopInformation")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MenuInformation_ShopAccount", Storage:="_MenuInformation", ThisKey:="MenuName", OtherKey:="MenuName", IsForeignKey:=true)>  _
	Public Property MenuInformation() As MenuInformation
		Get
			Return Me._MenuInformation.Entity
		End Get
		Set
			Dim previousValue As MenuInformation = Me._MenuInformation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MenuInformation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MenuInformation.Entity = Nothing
					previousValue.ShopAccount.Remove(Me)
				End If
				Me._MenuInformation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ShopAccount.Add(Me)
					Me._MenuName = value.MenuName
				Else
					Me._MenuName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MenuInformation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Shop.ShopInformation")>  _
Partial Public Class ShopInformation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ShopID As String
	
	Private _RegionCode As String
	
	Private _ShopName As String
	
	Private _ShopOpenDate As Date
	
	Private _ShopTableAccout As Integer
	
	Private _ShopAccount As EntitySet(Of ShopAccount)
	
    #Region "확장성 메서드 정의"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnShopIDChanging(value As String)
    End Sub
    Partial Private Sub OnShopIDChanged()
    End Sub
    Partial Private Sub OnRegionCodeChanging(value As String)
    End Sub
    Partial Private Sub OnRegionCodeChanged()
    End Sub
    Partial Private Sub OnShopNameChanging(value As String)
    End Sub
    Partial Private Sub OnShopNameChanged()
    End Sub
    Partial Private Sub OnShopOpenDateChanging(value As Date)
    End Sub
    Partial Private Sub OnShopOpenDateChanged()
    End Sub
    Partial Private Sub OnShopTableAccoutChanging(value As Integer)
    End Sub
    Partial Private Sub OnShopTableAccoutChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ShopAccount = New EntitySet(Of ShopAccount)(AddressOf Me.attach_ShopAccount, AddressOf Me.detach_ShopAccount)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ShopID() As String
		Get
			Return Me._ShopID
		End Get
		Set
			If (String.Equals(Me._ShopID, value) = false) Then
				Me.OnShopIDChanging(value)
				Me.SendPropertyChanging
				Me._ShopID = value
				Me.SendPropertyChanged("ShopID")
				Me.OnShopIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegionCode", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RegionCode() As String
		Get
			Return Me._RegionCode
		End Get
		Set
			If (String.Equals(Me._RegionCode, value) = false) Then
				Me.OnRegionCodeChanging(value)
				Me.SendPropertyChanging
				Me._RegionCode = value
				Me.SendPropertyChanged("RegionCode")
				Me.OnRegionCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ShopName() As String
		Get
			Return Me._ShopName
		End Get
		Set
			If (String.Equals(Me._ShopName, value) = false) Then
				Me.OnShopNameChanging(value)
				Me.SendPropertyChanging
				Me._ShopName = value
				Me.SendPropertyChanged("ShopName")
				Me.OnShopNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopOpenDate", DbType:="Date NOT NULL")>  _
	Public Property ShopOpenDate() As Date
		Get
			Return Me._ShopOpenDate
		End Get
		Set
			If ((Me._ShopOpenDate = value)  _
						= false) Then
				Me.OnShopOpenDateChanging(value)
				Me.SendPropertyChanging
				Me._ShopOpenDate = value
				Me.SendPropertyChanged("ShopOpenDate")
				Me.OnShopOpenDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopTableAccout", DbType:="Int NOT NULL")>  _
	Public Property ShopTableAccout() As Integer
		Get
			Return Me._ShopTableAccout
		End Get
		Set
			If ((Me._ShopTableAccout = value)  _
						= false) Then
				Me.OnShopTableAccoutChanging(value)
				Me.SendPropertyChanging
				Me._ShopTableAccout = value
				Me.SendPropertyChanged("ShopTableAccout")
				Me.OnShopTableAccoutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ShopInformation_ShopAccount", Storage:="_ShopAccount", ThisKey:="ShopID", OtherKey:="ShopID")>  _
	Public Property ShopAccount() As EntitySet(Of ShopAccount)
		Get
			Return Me._ShopAccount
		End Get
		Set
			Me._ShopAccount.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ShopAccount(ByVal entity As ShopAccount)
		Me.SendPropertyChanging
		entity.ShopInformation = Me
	End Sub
	
	Private Sub detach_ShopAccount(ByVal entity As ShopAccount)
		Me.SendPropertyChanging
		entity.ShopInformation = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Product.MenuInformation")>  _
Partial Public Class MenuInformation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MenuName As String
	
	Private _ImageContent As System.Data.Linq.Binary
	
	Private _ImageType As String
	
	Private _ImageHeight As Integer
	
	Private _ImageWidth As Integer
	
	Private _MenuPrice As Integer
	
	Private _MenuInfomation As String
	
	Private _ShopAccount As EntitySet(Of ShopAccount)
	
    #Region "확장성 메서드 정의"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMenuNameChanging(value As String)
    End Sub
    Partial Private Sub OnMenuNameChanged()
    End Sub
    Partial Private Sub OnImageContentChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImageContentChanged()
    End Sub
    Partial Private Sub OnImageTypeChanging(value As String)
    End Sub
    Partial Private Sub OnImageTypeChanged()
    End Sub
    Partial Private Sub OnImageHeightChanging(value As Integer)
    End Sub
    Partial Private Sub OnImageHeightChanged()
    End Sub
    Partial Private Sub OnImageWidthChanging(value As Integer)
    End Sub
    Partial Private Sub OnImageWidthChanged()
    End Sub
    Partial Private Sub OnMenuPriceChanging(value As Integer)
    End Sub
    Partial Private Sub OnMenuPriceChanged()
    End Sub
    Partial Private Sub OnMenuInfomationChanging(value As String)
    End Sub
    Partial Private Sub OnMenuInfomationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ShopAccount = New EntitySet(Of ShopAccount)(AddressOf Me.attach_ShopAccount, AddressOf Me.detach_ShopAccount)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MenuName() As String
		Get
			Return Me._MenuName
		End Get
		Set
			If (String.Equals(Me._MenuName, value) = false) Then
				Me.OnMenuNameChanging(value)
				Me.SendPropertyChanging
				Me._MenuName = value
				Me.SendPropertyChanged("MenuName")
				Me.OnMenuNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageContent", DbType:="VarBinary(MAX)", CanBeNull:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImageContent() As System.Data.Linq.Binary
		Get
			Return Me._ImageContent
		End Get
		Set
			If (Object.Equals(Me._ImageContent, value) = false) Then
				Me.OnImageContentChanging(value)
				Me.SendPropertyChanging
				Me._ImageContent = value
				Me.SendPropertyChanged("ImageContent")
				Me.OnImageContentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageType", DbType:="Char(10) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageType() As String
		Get
			Return Me._ImageType
		End Get
		Set
			If (String.Equals(Me._ImageType, value) = false) Then
				Me.OnImageTypeChanging(value)
				Me.SendPropertyChanging
				Me._ImageType = value
				Me.SendPropertyChanged("ImageType")
				Me.OnImageTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageHeight", DbType:="Int NOT NULL")>  _
	Public Property ImageHeight() As Integer
		Get
			Return Me._ImageHeight
		End Get
		Set
			If ((Me._ImageHeight = value)  _
						= false) Then
				Me.OnImageHeightChanging(value)
				Me.SendPropertyChanging
				Me._ImageHeight = value
				Me.SendPropertyChanged("ImageHeight")
				Me.OnImageHeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageWidth", DbType:="Int NOT NULL")>  _
	Public Property ImageWidth() As Integer
		Get
			Return Me._ImageWidth
		End Get
		Set
			If ((Me._ImageWidth = value)  _
						= false) Then
				Me.OnImageWidthChanging(value)
				Me.SendPropertyChanging
				Me._ImageWidth = value
				Me.SendPropertyChanged("ImageWidth")
				Me.OnImageWidthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuPrice", DbType:="Int NOT NULL")>  _
	Public Property MenuPrice() As Integer
		Get
			Return Me._MenuPrice
		End Get
		Set
			If ((Me._MenuPrice = value)  _
						= false) Then
				Me.OnMenuPriceChanging(value)
				Me.SendPropertyChanging
				Me._MenuPrice = value
				Me.SendPropertyChanged("MenuPrice")
				Me.OnMenuPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuInfomation", DbType:="VarChar(MAX)")>  _
	Public Property MenuInfomation() As String
		Get
			Return Me._MenuInfomation
		End Get
		Set
			If (String.Equals(Me._MenuInfomation, value) = false) Then
				Me.OnMenuInfomationChanging(value)
				Me.SendPropertyChanging
				Me._MenuInfomation = value
				Me.SendPropertyChanged("MenuInfomation")
				Me.OnMenuInfomationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MenuInformation_ShopAccount", Storage:="_ShopAccount", ThisKey:="MenuName", OtherKey:="MenuName")>  _
	Public Property ShopAccount() As EntitySet(Of ShopAccount)
		Get
			Return Me._ShopAccount
		End Get
		Set
			Me._ShopAccount.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ShopAccount(ByVal entity As ShopAccount)
		Me.SendPropertyChanging
		entity.MenuInformation = Me
	End Sub
	
	Private Sub detach_ShopAccount(ByVal entity As ShopAccount)
		Me.SendPropertyChanging
		entity.MenuInformation = Nothing
	End Sub
End Class

Partial Public Class SelectShopAccountResult
	
	Private _ShopAccountID As Integer
	
	Private _ShopID As String
	
	Private _MenuName As String
	
	Private _Date As Date
	
	Private _TableNumber As Integer
	
	Private _MenuAccount As Integer
	
	Private _Profit As Integer
	
	Private _OrderState As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopAccountID", DbType:="Int NOT NULL")>  _
	Public Property ShopAccountID() As Integer
		Get
			Return Me._ShopAccountID
		End Get
		Set
			If ((Me._ShopAccountID = value)  _
						= false) Then
				Me._ShopAccountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ShopID() As String
		Get
			Return Me._ShopID
		End Get
		Set
			If (String.Equals(Me._ShopID, value) = false) Then
				Me._ShopID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MenuName() As String
		Get
			Return Me._MenuName
		End Get
		Set
			If (String.Equals(Me._MenuName, value) = false) Then
				Me._MenuName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="DateTime NOT NULL")>  _
	Public Property [Date]() As Date
		Get
			Return Me._Date
		End Get
		Set
			If ((Me._Date = value)  _
						= false) Then
				Me._Date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TableNumber", DbType:="Int NOT NULL")>  _
	Public Property TableNumber() As Integer
		Get
			Return Me._TableNumber
		End Get
		Set
			If ((Me._TableNumber = value)  _
						= false) Then
				Me._TableNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuAccount", DbType:="Int NOT NULL")>  _
	Public Property MenuAccount() As Integer
		Get
			Return Me._MenuAccount
		End Get
		Set
			If ((Me._MenuAccount = value)  _
						= false) Then
				Me._MenuAccount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Profit", DbType:="Int NOT NULL")>  _
	Public Property Profit() As Integer
		Get
			Return Me._Profit
		End Get
		Set
			If ((Me._Profit = value)  _
						= false) Then
				Me._Profit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderState", DbType:="Int")>  _
	Public Property OrderState() As System.Nullable(Of Integer)
		Get
			Return Me._OrderState
		End Get
		Set
			If (Me._OrderState.Equals(value) = false) Then
				Me._OrderState = value
			End If
		End Set
	End Property
End Class
