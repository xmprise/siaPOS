'------------------------------------------------------------------------------
' <auto-generated>
'     이 코드는 도구를 사용하여 생성되었습니다.
'     런타임 버전:4.0.30319.235
'
'     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
'     이러한 변경 내용이 손실됩니다.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SibalChk2011")>  _
Partial Public Class ShopMessageDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "확장성 메서드 정의"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertMessageTypes(instance As MessageTypes)
    End Sub
  Partial Private Sub UpdateMessageTypes(instance As MessageTypes)
    End Sub
  Partial Private Sub DeleteMessageTypes(instance As MessageTypes)
    End Sub
  Partial Private Sub InsertShopMessage(instance As ShopMessage)
    End Sub
  Partial Private Sub UpdateShopMessage(instance As ShopMessage)
    End Sub
  Partial Private Sub DeleteShopMessage(instance As ShopMessage)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SibalChk2011ConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property MessageTypes() As System.Data.Linq.Table(Of MessageTypes)
		Get
			Return Me.GetTable(Of MessageTypes)
		End Get
	End Property
	
	Public ReadOnly Property ShopMessage() As System.Data.Linq.Table(Of ShopMessage)
		Get
			Return Me.GetTable(Of ShopMessage)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertShopMessage")>  _
	Public Function InsertShopMessage(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ShopID", DbType:="VarChar(50)")> ByVal shopID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Message", DbType:="VarChar(MAX)")> ByVal message As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MessageType", DbType:="VarChar(50)")> ByVal messageType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MessageDate", DbType:="NVarChar(50)")> ByVal messageDate As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MessageID", DbType:="Int")> ByRef messageID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), shopID, message, messageType, messageDate, messageID)
		messageID = CType(result.GetParameterValue(4),System.Nullable(Of Integer))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateShopMessage")>  _
	Public Function UpdateShopMessage(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MessageID", DbType:="Int")> ByVal messageID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ShopID", DbType:="VarChar(50)")> ByVal shopID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Message", DbType:="VarChar(MAX)")> ByVal message As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MessageType", DbType:="VarChar(50)")> ByVal messageType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MessageDate", DbType:="NVarChar(50)")> ByVal messageDate As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), messageID, shopID, message, messageType, messageDate)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Shop.MessageTypes")>  _
Partial Public Class MessageTypes
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MessageTypeID As Integer
	
	Private _MessageType As String
	
	Private _Status As Boolean
	
    #Region "확장성 메서드 정의"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMessageTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMessageTypeIDChanged()
    End Sub
    Partial Private Sub OnMessageTypeChanging(value As String)
    End Sub
    Partial Private Sub OnMessageTypeChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageTypeID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property MessageTypeID() As Integer
		Get
			Return Me._MessageTypeID
		End Get
		Set
			If ((Me._MessageTypeID = value)  _
						= false) Then
				Me.OnMessageTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._MessageTypeID = value
				Me.SendPropertyChanged("MessageTypeID")
				Me.OnMessageTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageType() As String
		Get
			Return Me._MessageType
		End Get
		Set
			If (String.Equals(Me._MessageType, value) = false) Then
				Me.OnMessageTypeChanging(value)
				Me.SendPropertyChanging
				Me._MessageType = value
				Me.SendPropertyChanged("MessageType")
				Me.OnMessageTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Bit NOT NULL")>  _
	Public Property Status() As Boolean
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Shop.ShopMessage")>  _
Partial Public Class ShopMessage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MessageID As Integer
	
	Private _ShopID As String
	
	Private _Message As String
	
	Private _MessageType As String
	
	Private _MessageDate As String
	
    #Region "확장성 메서드 정의"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMessageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMessageIDChanged()
    End Sub
    Partial Private Sub OnShopIDChanging(value As String)
    End Sub
    Partial Private Sub OnShopIDChanged()
    End Sub
    Partial Private Sub OnMessageChanging(value As String)
    End Sub
    Partial Private Sub OnMessageChanged()
    End Sub
    Partial Private Sub OnMessageTypeChanging(value As String)
    End Sub
    Partial Private Sub OnMessageTypeChanged()
    End Sub
    Partial Private Sub OnMessageDateChanging(value As String)
    End Sub
    Partial Private Sub OnMessageDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MessageID() As Integer
		Get
			Return Me._MessageID
		End Get
		Set
			If ((Me._MessageID = value)  _
						= false) Then
				Me.OnMessageIDChanging(value)
				Me.SendPropertyChanging
				Me._MessageID = value
				Me.SendPropertyChanged("MessageID")
				Me.OnMessageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ShopID() As String
		Get
			Return Me._ShopID
		End Get
		Set
			If (String.Equals(Me._ShopID, value) = false) Then
				Me.OnShopIDChanging(value)
				Me.SendPropertyChanging
				Me._ShopID = value
				Me.SendPropertyChanged("ShopID")
				Me.OnShopIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Message", DbType:="VarChar(MAX)")>  _
	Public Property Message() As String
		Get
			Return Me._Message
		End Get
		Set
			If (String.Equals(Me._Message, value) = false) Then
				Me.OnMessageChanging(value)
				Me.SendPropertyChanging
				Me._Message = value
				Me.SendPropertyChanged("Message")
				Me.OnMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageType() As String
		Get
			Return Me._MessageType
		End Get
		Set
			If (String.Equals(Me._MessageType, value) = false) Then
				Me.OnMessageTypeChanging(value)
				Me.SendPropertyChanging
				Me._MessageType = value
				Me.SendPropertyChanged("MessageType")
				Me.OnMessageTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageDate", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageDate() As String
		Get
			Return Me._MessageDate
		End Get
		Set
			If (String.Equals(Me._MessageDate, value) = false) Then
				Me.OnMessageDateChanging(value)
				Me.SendPropertyChanging
				Me._MessageDate = value
				Me.SendPropertyChanged("MessageDate")
				Me.OnMessageDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
